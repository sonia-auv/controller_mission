!!python/object:rqt_mission_planner.Renderer.MissionContainer
globalparams: []
statesui:
- &id001 !!python/object:rqt_mission_planner.Renderer.StateUI
  position: !!python/tuple [274, 38]
  radius: 100
  state: !!python/object:rqt_mission_planner.mission_model.state.State
    _name: launchVision.LaunchVision
    base_file: /src/controller_mission/state/launchVision.py
    is_root: true
    outcome_states: [succeeded, aborted]
    parameters:
    - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: state_name,
      value: !!python/unicode 'StartVision', variable_name: state_name}
    - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''Topic
        of  result''', value: !!python/unicode 'buoy_red', variable_name: param_node_name}
    - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''Times
        Out''', value: !!python/unicode 'simple_buoy', variable_name: param_filterchain_name}
    - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''Times
        Out''', value: !!python/unicode '/provider_vision/Front_GigE', variable_name: param_media_name}
    - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''Times
        Out''', value: 1.0, variable_name: param_cmd}
    transitions:
    - !!python/object:rqt_mission_planner.mission_model.state.Transition {outcome: succeeded,
      state: !!python/unicode 'AlignRedBuoy'}
  transitions:
  - !!python/object:rqt_mission_planner.Renderer.TransitionUI
    name: succeeded
    state1: *id001
    state2: &id002 !!python/object:rqt_mission_planner.Renderer.StateUI
      position: !!python/tuple [279, 219]
      radius: 100
      state: !!python/object:rqt_mission_planner.mission_model.state.State
        _name: alignToVision.AlignToVision
        base_file: /src/controller_mission/state/alignToVision.py
        outcome_states: [succeeded, aborted, forward]
        parameters:
        - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: state_name,
          value: !!python/unicode 'AlignRedBuoy', variable_name: state_name}
        - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''bounding
            box''', value: 0.05, variable_name: param_bounding_box}
        - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''color
            of object to align''', value: red, variable_name: param_color}
        - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''maximum
            nb of pixel to align with heading''', value: 30.0, variable_name: param_threshold_width}
        - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''Yaw
            rotation to align vision''', value: 30.0, variable_name: param_heading}
        - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''transform
            pixel to meter''', value: 0.23, variable_name: param_vision_target_width_in_meter}
        - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''Name
            of topic to listen''', value: !!python/unicode '/proc_image_processing/buoy_red_result',
          variable_name: param_topic_to_listen}
        - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''Minimal
            nb of pixel to ram''', value: 300.0, variable_name: param_nb_pixel_to_victory}
        - !!python/object:rqt_mission_planner.mission_model.state.Parameter {description: ' ''Maximum
            number of alignment''', value: 4.0, variable_name: param_maximum_nb_alignment}
        transitions:
        - !!python/object:rqt_mission_planner.mission_model.state.Transition {outcome: forward,
          state: !!python/unicode 'ForwardRedBuoy'}
        - !!python/object:rqt_mission_planner.mission_model.state.Transition {outcome: succeeded,
          state: !!python/unicode 'StopVision'}
      transitions:
      - !!python/object:rqt_mission_planner.Renderer.TransitionUI
        name: forward
        state1: *id002
        state2: &id003 !!python/object:rqt_mission_planner.Renderer.StateUI
          position: !!python/tuple [526, 212]
          radius: 112
          state: !!python/object:rqt_mission_planner.mission_model.state.State
            _name: forwardVision.ForwardVision
            base_file: /src/controller_mission/state/forwardVision.py
            outcome_states: [succeeded, aborted]
            parameters:
            - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
              description: state_name, value: !!python/unicode 'ForwardRedBuoy', variable_name: state_name}
            - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
              description: ' ''color of object to align''', value: red, variable_name: param_color}
            - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
              description: ' ''Target''', value: 0.5, variable_name: param_distance_x}
            - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
              description: ' ''Target''', value: 0.1, variable_name: param_bounding_box}
            - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
              description: ' ''Target''', value: 0.23, variable_name: param_vision_target_width_in_meter}
            - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
              description: ' ''minimal nb of pixel to ram''', value: 300.0, variable_name: param_nb_pixel_to_victory}
            - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
              description: ' ''Name of topic to listen''', value: !!python/unicode '/proc_image_processing/buoy_red_result',
              variable_name: param_topic_to_listen}
            transitions:
            - !!python/object:rqt_mission_planner.mission_model.state.Transition {
              outcome: aborted, state: !!python/unicode 'AlignRedBuoy'}
            - !!python/object:rqt_mission_planner.mission_model.state.Transition {
              outcome: succeeded, state: !!python/unicode 'StopVision'}
          transitions:
          - !!python/object:rqt_mission_planner.Renderer.TransitionUI
            name: aborted
            state1: *id003
            state2: *id002
          - !!python/object:rqt_mission_planner.Renderer.TransitionUI
            name: succeeded
            state1: *id003
            state2: &id004 !!python/object:rqt_mission_planner.Renderer.StateUI
              position: !!python/tuple [403, 454]
              radius: 100
              state: !!python/object:rqt_mission_planner.mission_model.state.State
                _name: launchVision.LaunchVision
                base_file: /src/controller_mission/state/launchVision.py
                is_root: false
                outcome_states: [succeeded, aborted]
                parameters:
                - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
                  description: state_name, value: !!python/unicode 'StopVision', variable_name: state_name}
                - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
                  description: ' ''Topic of  result''', value: !!python/unicode 'buoy_red',
                  variable_name: param_node_name}
                - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
                  description: ' ''Times Out''', value: !!python/unicode 'simple_buoy',
                  variable_name: param_filterchain_name}
                - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
                  description: ' ''Times Out''', value: !!python/unicode '/provider_vision/Front_GigE',
                  variable_name: param_media_name}
                - !!python/object:rqt_mission_planner.mission_model.state.Parameter {
                  description: ' ''Times Out''', value: 2.0, variable_name: param_cmd}
                transitions: []
              transitions: []
      - !!python/object:rqt_mission_planner.Renderer.TransitionUI
        name: succeeded
        state1: *id002
        state2: *id004
- *id004
- *id002
- *id003
